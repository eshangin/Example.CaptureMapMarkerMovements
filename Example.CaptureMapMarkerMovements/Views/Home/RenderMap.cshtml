@model IEnumerable<Example.CaptureMapMarkerMovements.Models.Waypoint>

@{
    ViewBag.Title = "Home Page";
    Layout = null;
    string jsonData = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
    bool showButtons = Request["buttons"] == "True";
}

<!DOCTYPE html>
<html>
<head>
    @*<link rel="stylesheet" href="https://openlayers.org/en/v5.3.0/css/ol.css" type="text/css">*@
    <style type="text/css">
        .overlay {
            border: 1px solid #000;
            background-color: #fff;
            text-align: center;
            padding: 5px;
            margin-bottom: 15px;
        }
    </style>
    <script src="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/build/ol.js"></script>
    <script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=requestAnimationFrame,Element.prototype.classList,URL"></script>
</head>
<body>

    <div id="map" class="map" style="width: 1000px; height: 600px;"></div>
    <div style="display: none">
        <div id="completestate">not started</div>
        <div id="input-data">@jsonData</div>
        <div id="overlay" class="overlay"></div>
    </div>
    @if (showButtons)
    {
        <div style="margin-top: 30px">
            <button type="button" id="btn-start-animation">Start animation</button>
        </div>
    }

    <script>        

        var inputData = JSON.parse(document.getElementById('input-data').innerText);

        var wp = parseWaypoints(inputData);
        var mapInfo = initializeMap();
        initButtons();

        var currentCarWaypointIndex = 0;
        var intermidiateWaypointsToOriginalDataHash = {};
        var waypointsWithIntermidiate = calculateIntermidiatePoints();        

        console.log('TOTAL WAYPOINTS', waypointsWithIntermidiate.length);

        // This function will be called by PhantomJS script
        function moveMarker() {

            var waypoints = waypointsWithIntermidiate;

            if (currentCarWaypointIndex >= waypoints.length) {
                stopAnimation();
                return;
            }

            var waypointCoords = waypoints[currentCarWaypointIndex];
            var waypointData = intermidiateWaypointsToOriginalDataHash[waypointCoords[0] + waypointCoords[1]];
            var text = 'Date: ' + waypointData.Date + '<br/>Speed: ' + waypointData.Speed;
            mapInfo.carMarker.getStyle().setText(createTextStyle(waypointData.DeviceName));
            mapInfo.carMarker.getGeometry().setCoordinates(waypointCoords);

            updateOverlay(mapInfo.overlay, waypointCoords, text);

            currentCarWaypointIndex += 1;
        }

        function readyToStartAnimation() {
            document.getElementById('completestate').innerHTML = 'start';
        }

        function stopAnimation() {
            mapInfo.map.removeOverlay(mapInfo.overlay);

            console.log('animation complete');

            document.getElementById('completestate').innerHTML = 'yes';
        }

        function fitMap(map) {
            var extent = {
                maxLng: Math.max.apply(null, wp.map(function (item) {
                    return item[0];
                })),
                minLng: Math.min.apply(null, wp.map(function (item) {
                    return item[0];
                })),
                maxLat: Math.max.apply(null, wp.map(function (item) {
                    return item[1];
                })),
                minLat: Math.min.apply(null, wp.map(function (item) {
                    return item[1];
                }))
            };
            map.getView().fit([extent.minLng, extent.minLat, extent.maxLng, extent.maxLat]);
        }

        function distanceBetweenPoints(latlng1, latlng2) {
            var line = new ol.geom.LineString([latlng1, latlng2]);
            return line.getLength();
        };

        function createTextStyle(text) {
            return new ol.style.Text({
                textBaseline: 'middle',
                font: 'Arial',
                text: text,
                fill: new ol.style.Fill({ color: 'blue' }),
                offsetY: 15,
                stroke: new ol.style.Stroke({ color: '#fff', width: 2 })
            });
        };

        function calculateIntermidiatePoints() {
            var intermidiateWp = [];
            var mapExtent = mapInfo.map.getView().calculateExtent(mapInfo.map.getSize());
            var mapDiagonalDistance = distanceBetweenPoints([mapExtent[0], mapExtent[1]], [mapExtent[2], mapExtent[3]]);

            var dotsPerOnePercentDistance = 1;
            for (var i = 1; i < wp.length; i++) {
                //console.log((distanceBetweenPoints(wp[i - 1], wp[i]) * 100 / mapDiagonalDistance) + ' %', Math.ceil((distanceBetweenPoints(wp[i - 1], wp[i]) * 100 / mapDiagonalDistance)));
                var wpDistToMapDistInPercents = Math.ceil((distanceBetweenPoints(wp[i - 1], wp[i]) * 100 / mapDiagonalDistance));

                // Push actual point
                intermidiateWp.push(wp[i - 1]);
                pushIntermidiateWaypont(intermidiateWp, wp[i - 1], inputData[i - 1]);

                // Push itermidiate points
                var dotsPerCurrentPoints = dotsPerOnePercentDistance * wpDistToMapDistInPercents;
                for (var j = 1; j <= dotsPerCurrentPoints; j++) {
                    pushIntermidiateWaypont(intermidiateWp, [
                        wp[i - 1][0] + (wp[i][0] - wp[i - 1][0]) * j / (dotsPerCurrentPoints + 1),
                        wp[i - 1][1] + (wp[i][1] - wp[i - 1][1]) * j / (dotsPerCurrentPoints + 1)
                    ], inputData[i - 1]);
                }

                if (i == wp.length - 1) {
                    intermidiateWp.push(wp[i]);
                    pushIntermidiateWaypont(intermidiateWp, wp[i], inputData[i]);
                }
            }

            return intermidiateWp;
        }

        function pushIntermidiateWaypont(intermidiateWp, coordinates, originalWaypointData) {
            intermidiateWp.push(coordinates);
            intermidiateWaypointsToOriginalDataHash[coordinates[0] + coordinates[1]] = originalWaypointData;
        }

        function createOverlay(map) {
            var overlay = new ol.Overlay({
                element: document.getElementById('overlay'),
                positioning: 'bottom-center'
            });            
            map.addOverlay(overlay);
            return overlay;
        }

        function updateOverlay(overlay, coordinates, text) {
            element: document.getElementById('overlay').innerHTML = text;
            overlay.setPosition(coordinates);
        }

        function createCarMarker(map) {
            var carMarker = new ol.Feature({
                geometry: new ol.geom.Point(wp[0])
            });

            carMarker.setStyle(new ol.style.Style({
                image: new ol.style.Circle({
                    radius: 7,
                    fill: new ol.style.Fill({ color: 'black' }),
                    stroke: new ol.style.Stroke({
                        color: 'white', width: 2
                    })
                })
            }));

            map.addLayer(new ol.layer.Vector({
                source: new ol.source.Vector({
                    features: [carMarker]
                })
            }));

            return carMarker;
        }

        function parseWaypoints() {
            var wp = [];
            for (var i = 0; i < inputData.length; i++) {
                wp.push([inputData[i].Lng, inputData[i].Lat]);
            }

            for (var i = 0; i < wp.length; i++) {
                wp[i] = ol.proj.fromLonLat(wp[i]);
            }

            return wp;
        }

        function createWaypointsLayer(map) {
            var wpline = new ol.source.Vector({
                features: [new ol.Feature({
                    geometry: new ol.geom.LineString(wp),
                    name: 'ABC Line'
                })]
            });

            // Add point feature for every coordinate
            for (var i = 0; i < wp.length; i++) {
                wpline.addFeature(new ol.Feature({
                    geometry: new ol.geom.Point(wp[i])
                }));
            }

            map.addLayer(new ol.layer.Vector({
                source: wpline
            }));
        }

        function createMapTilesLayer(map) {
            var key = 'AifUA41UximrujvNoJp15-yQsmBOattJxjecWXdsW4fzIDr14uBd0-xvZykxDoAq';

            //var tileSource = new ol.source.OSM();
            var tileSource = new ol.source.BingMaps({ key: key, imagerySet: 'Road' });

            var tilesState = {
                loaded: 0,
                total: 0
            };
            tileSource.on('tileloadstart', function () {
                tilesState.total++;
            });
            tileSource.on('tileloadend', function (a) {
                tilesState.loaded++;
                if (tilesState.loaded == tilesState.total) {
                    console.log('all tiles loaded (' + tilesState.loaded + ')');
                    readyToStartAnimation();
                }
            });
            tileSource.on('tileloaderror', function (a, b) {
                console.log('tile load error', a, b);
            });

            map.addLayer(new ol.layer.Tile({
                source: tileSource
            }));
        }

        function initializeMap() {
            var map = new ol.Map({
                target: document.getElementById('map'),
                loadTilesWhileAnimating: true,
                view: new ol.View({
                    center: wp[0],
                    zoom: 10,
                    minZoom: 2,
                    maxZoom: 19
                }),
                controls: []
            });

            createMapTilesLayer(map);
            createWaypointsLayer(map);
            var carMarker = createCarMarker(map);
            fitMap(map);
            var overlay = createOverlay(map);

            return {
                map: map,
                carMarker: carMarker,
                overlay: overlay
            }
        }

        function initButtons() {
            var btn = document.getElementById('btn-start-animation');
            if (btn) {
                btn.addEventListener('click', function () {
                    setInterval(function () {
                        if (document.getElementById('completestate').innerHTML != 'yes') {
                            moveMarker();
                        }
                    }, 20);
                });
            }
        }

    </script>
</body>
</html>
